//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlphatronMarineServer.Models
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;

    public partial class Equipment
    {
        public int SerialNumber { get; set; }
        public string Model { get; set; }
        public string Maker { get; set; }
        public string Remarks { get; set; }
        public Nullable<int> VesselIMO { get; set; }
        
        public string Fields { get; set; }
        public Nullable<int> TemplateID { get; set; }
        public DateTime CheckDate { get; set; }
        public string Name { get; set; }
    
        public virtual EquipmentTemplates EquipmentTemplates { get; set; }
        [JsonIgnore]
        [IgnoreDataMember]
        public virtual Vessel Vessel { get; set; }

        [JsonIgnore]
        [IgnoreDataMember]
        public Dictionary<string, string> FieldsValuesPrivate
        {
            get {
                if (Fields != null)
                {
                    return JsonConvert.DeserializeObject<Dictionary<string, string>>(Fields);
                }
                else
                    return null;
            }
        }

        public List<KeyValuePair<string,string>> FieldsValues
        {
            get
            {
                if (Fields != null)
                {
                    return (JsonConvert.DeserializeObject<Dictionary<string, string>>(Fields)).ToList();
                }
                else
                    return null;
            }
        }

        public string GetFieldValue(string f)
        {
            if (FieldsValues != null)
            {
                return FieldsValuesPrivate[f];
            }
            else
                return null;
        }

    }
}
